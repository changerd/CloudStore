@using CloudStore.Models
@model Product

@{
    ViewBag.Title = "Create product";
}

<h2>Create product</h2>


@using (Html.BeginForm("CreateProduct", "Admin", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">

        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.Label("Name", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ProductName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ProductName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Manufacturer", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("ManufacturerId", ViewBag.Manufacturer as SelectList, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ManufacturerId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Categories", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @if (Model.Categories != null)
                {
                    foreach (Category c in ViewBag.Category)
                    {
                        <input type="checkbox" name="selectedCategory" value="@c.Id" @(Model.Categories.Contains(c) ? "checked=\"checked\"" : "") />@c.CategoryName <br />
                    }
                }
                else
                {
                    foreach (Category c in ViewBag.Category)
                    {
                        <input type="checkbox" name="selectedCategory" value="@c.Id" @*@(Model.Categories.Contains(c) ? "checked=\"checked\"" : "")*@ />@c.CategoryName <br />
                    }
                }
                @Html.ValidationMessage("Categories", new { @class = "text-danger" })
            </div>
        </div>

        @if (Model.Photo != null)
        {
            <div class="form-group">
                @Html.Label("Photo", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.Raw("<img name=\"uploadImage\" src=\"data:image/jpeg;base64," + Convert.ToBase64String(Model.Photo) + "\" />")
                    @Html.HiddenFor(model => Model.Photo)
                    <input type="file" name="uploadImage" />
                    @Html.ValidationMessage("Photo", new { @class = "text-danger" })
                </div>
            </div>
        }
        else
        {
            <div class="form-group">
                @Html.Label("Photo", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <input type="file" name="uploadImage" />
                    @Html.ValidationMessage("Photo", new { @class = "text-danger" })
                </div>
            </div>
        }
        

        <div class="form-group">
            @Html.Label("Description", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Price", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @*@{ Html.EnableClientValidation(false); }*@
                @Html.EditorFor(model => model.Cost, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Cost, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Status", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("StatusProductId", ViewBag.StatusProduct as SelectList, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.StatusProductId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("In stock", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Stock, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Stock, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10 my-2">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back", "GetProduct")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
